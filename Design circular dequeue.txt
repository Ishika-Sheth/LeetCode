class MyCircularDeque:
    def __init__(self, k):
        self.k = k  # Maximum size of deque
        self.deque = [0] * k  # Initialize the deque with a fixed size
        self.front = -1  # Index for the front of the deque
        self.rear = -1  # Index for the rear of the deque
        self.size = 0  # Current size of the deque

    def insertFront(self, value):
        if self.isFull():
            return False
        if self.isEmpty():
            self.front = 0
            self.rear = 0
        else:
            self.front = (self.front - 1) % self.k  # Circular increment
        self.deque[self.front] = value
        self.size += 1
        return True

    def insertLast(self, value):
        if self.isFull():
            return False
        if self.isEmpty():
            self.front = 0
            self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.k  # Circular increment
        self.deque[self.rear] = value
        self.size += 1
        return True

    def deleteFront(self):
        if self.isEmpty():
            return False
        if self.front == self.rear:  # Only one element was present
            self.front = -1
            self.rear = -1
        else:
            self.front = (self.front + 1) % self.k  # Circular decrement
        self.size -= 1
        return True

    def deleteLast(self):
        if self.isEmpty():
            return False
        if self.front == self.rear:  # Only one element was present
            self.front = -1
            self.rear = -1
        else:
            self.rear = (self.rear - 1) % self.k  # Circular decrement
        self.size -= 1
        return True

    def getFront(self):
        if self.isEmpty():
            return -1
        return self.deque[self.front]

    def getRear(self):
        if self.isEmpty():
            return -1
        return self.deque[self.rear]

    def isEmpty(self):
        return self.size == 0

    def isFull(self):
        return self.size == self.k

# Example usage
if __name__ == "__main__":
    myCircularDeque = MyCircularDeque(3)
    print(myCircularDeque.insertLast(1))  # return True
    print(myCircularDeque.insertLast(2))  # return True
    print(myCircularDeque.insertFront(3))  # return True
    print(myCircularDeque.insertFront(4))  # return False, the queue is full
    print(myCircularDeque.getRear())       # return 2
    print(myCircularDeque.isFull())        # return True
    print(myCircularDeque.deleteLast())     # return True
    print(myCircularDeque.insertFront(4))  # return True
    print(myCircularDeque.getFront())      # return 4
